#!/bin/bash

system_type=$(uname -s)

# Get whether we're doing a headless install
# Mostly relevant to linux systems.
function get_headless() {
  # Let's just assume our macOS targets are not headless
  if [[ "$system_type" = "Darwin" ]]; then
    headless="n"
    return
  fi

  while true; do
    echo -n "Is this a headless install? [y/n] "
    read headless

    if [[ "$headless" == "y" || "$headless" == "n" ]]; then
      break;
    fi
  done
}

# Do we have root access?
function get_privileged() {
  # Let's just assume our macOS targets have root.
  if [[ "$system_type" = "Darwin" ]]; then
    privileged="y"
    return
  fi


  while true; do
    echo -n "Do we have sudo privileges? [y/n] "
    read privileged

    if [[ "$privileged" == "y" || "$privileged" == "n" ]]; then
      break;
    fi
  done
}

# This function temporarily sets up additional paths we might need for this script
function patch_path() {
  if [ "$system_type" = "Darwin" ]; then
    # We need homebrew in our path
    PATH="/opt/homebrew/bin:$PATH"
  fi
}

# Install packages required for our config
function install_packages() {
  echo "Installing packages";

  if [ "$system_type" = "Darwin" ]; then
    echo "Updating xcode toolchain"
    # Update xcode so we can build things with updated tools
    softwareupdate --all --install --force

    # Install clang
    xcode-select --install

    # Install homebrew
    echo "Installing Homebrew"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    # Package List
    macos_packages=(
        # Casks
        'firefox-developer-edition'
        'google-chrome'
        'steam'
        'spotify'
        'streamlabs-obs'
        'ubersicht'
        'visual-studio-code'
        'vlc'
        'postman'
        'godot'
        'font-hack'
        'blender'
        'alacritty'
        'discord-canary'

        # Formulae
        'cmake'
        'bat'
        'unp'
        'diff-so-fancy'
        'cowsay'
        'eslint'
        'chafa'
        'ca-certificates'
        'exa'
        'exiftool'
        'fd'
        'figlet'
        'fish'
        'fisher'
        'fzf'
        'ghostscript'
        'gcc'
        'git'
        'go'
        'gotop'
        'gtop'
        'gzip'
        'htop'
        'imagemagick'
        'ipython'
        'lolcat'
        'lsusb'
        'ncurses'
        'neofetch'
        'neovim'
        'nmap'
        'node'
        'openssl@1.1'
        'openssl@3'
        'pandoc'
        'p7zip'
        'zsh'
        'yarn'
        'yadm'
        'wget'
        'tmux'
        'sqlite'
        'skhd'
        'ripgrep'
        'qemu'
        'python@3.10'
        'prettyping'
        'yabai'
        'android-platform-tools'
        'spotifyd'
        'oha'
        'coreutils'
    )

    # Set homebrew SSH key so we don't get rate limited
    # Tap into the brew repositories we need
    brew_taps=(
        'khanhas/tap'
        'koekeishiya/formulae'
        'sidneys/homebrew'
        'cmacrae/formulae'
        'homebrew/cask-versions'
        'homebrew/cask-fonts'
    )

    # Add all of our homebrew sources
    for tap in "${brew_taps[@]}"; do
      /opt/homebrew/bin/brew tap $tap
    done

    # Install the packages from homebrew
    for package in "${macos_packages[@]}"; do
      /opt/homebrew/bin/brew install $package
    done
  fi
}

function setup_emacs() {
  if [ "$system_type" = "Darwin" ]; then
    echo "Installing emacs"
    brew tap 'railwaycat/emacsmacport'
    # Install emacs because it needs special flags
    brew install railwaycat/emacsmacport/emacs-mac --with-no-title-bars --with-emacs-sexy-icon --with-mac-metal --with-modules --with-imagemagick

    # Copy that Emacs.app to /Applications/Emacs.app
    rm -rf /Applications/Emacs.app
    cp -R /opt/homebrew/Cellar/emacs-mac/**/Emacs.app /Applications/

    # Install Doom Emacs
    echo "Setting up DOOM Emacs"
    git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.d
    ~/.emacs.d/bin/doom install
    ~/.emacs.d/bin/doom sync

    # Clone our org roam repository
    git clone git@github.com:wrathofrathma/org.git ~/.org
  fi
}

function setup_zsh() {
  echo "Setting up ZSH"
  # Install oh-my-zsh so our config works.
  git clone https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh
}

function setup_fish() {
  # Bootstrap Fish shell
  echo "Setting up Fish"
  # Allow fish to be used as a login shell
  # which fish should resolve to...
  # - macOS: /opt/homebrew/bin/fish
  # - arch: /usr/bin/fish
  # - debian: /usr/bin/fish
  echo "$(which fish)" | sudo tee -a /etc/shells

  # Changing fish to our default login shell
  chsh -s "$(which fish)"
}

# Setup window manager for non-headless installs
function setup_wm() {
  if [ "$system_type" = "Darwin" ]; then
    echo "Setting up MacOS WM"
    # Setup Yabai if SIP is disabled
    if [ "$(csrutil status)" == "System Integrity Protection status: enabled." ]; then
        echo "SIP currently enabled. To install Yabai, disable SIP https://github.com/koekeishiya/yabai/wiki/Disabling-System-Integrity-Protection"
    else
        echo "Installing Yabai"
        /opt/homebrew/bin/brew install koekeishiya/formulae/yabai
        sudo /opt/homebrew/bin/yabai --load-sa
        brew services start yabai

        # TODO - Modify /etc/sudoers to allow scripting additions to run on startup
        # https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(latest-release)
    fi
  fi
}


# Setup simple-bar

# Setup NVM


# Neovim / vim configuration

# First thing we should do is pre-emptively patch the path
patch_path

# Are we doing a headless install?
get_headless

# Do we have root access?
get_privileged

# Installing packages
# TODO - We should change where individual systems install stuff to if we don't have root.
# i.e. homebrew can target ~/.bin if we wanted. Maybe we can do similarly on linux
if [[ "$privileged" == "y" ]]; then
  install_packages
fi

# Decrypt our sensitive data
yadm decrypt

# Change YADM remote to ssh
yadm remote set-url origin git@github.com:wrathofrathma/dotfiles.git

# Install and configure emacs
setup_emacs

# Bootstrap shells
if [[ "$privileged" == "y" ]]; then
  setup_fish
fi
setup_zsh

# Setup window manager
if [[ "$headless" == "n" ]]; then
  setup_wm
fi
